argus@pop-os:~/Documents/AI$ g++ N_Queen.cpp
argus@pop-os:~/Documents/AI$ ./a.out
N-Queens Solver using Branch and Bound with Backtracking
========================================================

Example 1: 4-Queens problem
Solution 1:
. Q . . 
. . . Q 
Q . . . 
. . Q . 

Solution 2:
. . Q . 
Q . . . 
. . . Q 
. Q . . 

Found 2 solutions for 4-queens problem.
Time taken: 0.025212 milliseconds.

Example 2: 8-Queens problem
Found 92 solutions for 8-queens problem.
Time taken: 0.402145 milliseconds.

Enter board size for n-Queens problem (0 to exit): 4
Print all solutions? (y/n): y
Solution 1:
. Q . . 
. . . Q 
Q . . . 
. . Q . 

Solution 2:
. . Q . 
Q . . . 
. . . Q 
. Q . . 

Found 2 solutions for 4-queens problem.
Time taken: 0.044838 milliseconds.

Enter board size for n-Queens problem (0 to exit): 0





How the Algorithm Works

Branch and Bound: We use branch and bound to prune the search space by checking if a queen placement is valid before exploring further.
Backtracking: When we find an invalid placement, we backtrack and try different positions.
Constraints: No two queens can share the same row, column, or diagonal.

Technical Explanation
This algorithm solves the n-queens problem efficiently through:

Branch and Bound: For each position we check if it's valid before exploring further

If placement violates constraints, we prune that branch of the search tree
This dramatically reduces the number of states we need to explore


Backtracking: When we can't place a queen in the current row, we go back to the previous row and try a different position

The board vector keeps track of queen placements
Setting board[row] = -1 represents backtracking


Constraint Checking:

In isSafe(), we check three constraints:

Column conflict: board[i] == col
Diagonal conflicts:

board[i] - i == col - row (forward diagonals)
board[i] + i == col + row (backward diagonals)

Solution Count: For n=4, there are 2 solutions; for n=8, there are 92 solutions